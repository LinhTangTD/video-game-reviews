esrb_content_descriptors = c("Substances", "Blood", "Violence", "Humor", "Language", "Nudity", "Gambling", "Sexuality", "missing") # by https://www.esrb.org/ratings-guide/#cont_desc
for(i in 1:nrow(games)){
if(!is.na(games$esrb_descs[i])){
games$esrb_descs[i] = paste(intersect(strsplit(games$esrb_descs[i], " ")[[1]], esrb_content_descriptors), collapse=",")
}
}
# Create dummy variables for different descriptors (esrb_desc_missing indicates "missing" desc)
games = cSplit_e(games, "esrb_descs", sep=",", type = "character", fill = 0, drop = F)
# meta_data without dropping any original columns
write_csv(games, "clean_data/clean_data_all.csv") # dim: 18295 x 197
# Count NAs in the first 16 vars (i.e. non-dummy)
#data.frame(colSums(is.na(games[1:17])))
# Remove redundant columns and NAs from dataset
games = subset(games, select = -c(link, num_players, num_players_online, genres, esrb_descs))
games = games[complete.cases(games),]
# Export tidy data for modeling
write_csv(games, "clean_data/clean_data_model.csv") # dim: 16262 x 192
# load model to analyze english text
# games$game_id = 1:nrow(games)
# model <- udpipe_download_model(language = "english")
# udmodel_english <- udpipe_load_model(file = model$file_model)
# s <- udpipe_annotate(udmodel_english, x = games$game_desc, doc_id = games$game_id)
# x <- data.frame(s)
# stats <- keywords_rake(x = x, term = "lemma", group = "doc_id",
#                        relevant = x$upos %in% c("NOUN", "ADJ"))
# stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
# barchart(key ~ rake, data = head(subset(stats, freq > 3), 20), col = "red",
#          main = "Keywords identified by RAKE",
#          xlab = "Rake")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyr) ## For data wrangling and visualization
library(dplyr)
library(lubridate) ## To work with dates
library(splitstackshape)
library(udpipe) ## For textual analysis
setwd('/Users/linhtang/Desktop/STA-395/Code')
games = read_csv("games.csv")
games2 = read_csv("meta_games2.csv") #data with meta score only
#summary(games)
# Function to trim white spaces in character data
clean_whitespace = function(df){
for(col in colnames(df)){
if(is.character(df[[col]])){
df[[col]] = trimws(df[[col]], which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
}
}
return(df)
}
# Trim whitespaces
games = clean_whitespace(games)
games2 = clean_whitespace(games2)
# Remove duplicates based on title and platform in both dataset
games = distinct(games, title, platform, .keep_all = T) # 305 duplicates removed
games2 = distinct(games2, title, platform, .keep_all = T)
# Collapse three cols of meta scores into one
games2$meta = apply(games2[4:6], 1, function(x) x[!is.na(x)])
games2 = games2[-c(3:6)] # drop unnecessary cols
# Merge 2 data sets on title and platform by a left join
games = games %>%
select(-meta) %>%
left_join(games2, by = c("title", "platform"))
# Rename columns for consistent naming convention
games = games %>% rename_with(tolower)
games = rename(games, meta_score = meta, user_score = user, esrb_ratings = ratings)
# Change platform, developers, publishers, ratings variables to categorical data
games$platform = as.factor(games$platform)
games$developers = as.factor(games$developers)
games$publishers = as.factor(games$publishers)
games$esrb_ratings = as.factor(games$esrb_ratings)
# If game ranking is NA, set it to 1 level lower than the the lowest rating
games$most_discussed = replace_na(games$most_discussed, max(games$most_discussed, na.rm = TRUE))
games$best_game = replace_na(games$best_game, max(games$best_game, na.rm = TRUE))
games$most_shared = replace_na(games$most_shared, max(games$most_shared, na.rm = TRUE))
# Change release_date to datetime data type
games$release_date = parse_date_time(games$release_date, "mdy")
# Convert user score to numeric, scale to match meta score scale (out of 100)
games$user_score = as.numeric(games$user_score) * 10
# Drop rows that user_score and meta_score are NAs
games = games %>% drop_na(user_score, meta_score)
# Calculate years since release
today = as.Date(Sys.Date())
games$years_since_released = time_length(difftime(today, games$release_date), "years")
levels(games$platform)
table(games$platform)
data.frame(table(games$platform))
# Adding company based on platform:
games %>%
mutate(company = case_when(
starts_with(platform, "PlayStation") ~ "Sony",
starts_with(platform, "Xbox") ~ "Microsoft",
starts_with(platform, "Wii") ~ "Nintendo",
starts_with(platform, "Nintendo") ~ "Nintendo",
starts_with(platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
ends_with(platform, "DS") ~ "Nintendo", #3DS, DS
platform == "PC" ~ "PC",
platform == "Dreamcast" ~ "Sega",
platform == "PSP" ~ "Sony",
platform == "Stadia" ~ "PC",
platform == "Switch" ~ "Nintendo",
))
data.frame(table(games$platform))
# Adding company based on platform:
games$platform = as.character(games$platform)
games %>%
mutate(company = case_when(
starts_with(platform, "PlayStation") ~ "Sony",
starts_with(platform, "Xbox") ~ "Microsoft",
starts_with(platform, "Wii") ~ "Nintendo",
starts_with(platform, "Nintendo") ~ "Nintendo",
starts_with(platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
ends_with(platform, "DS") ~ "Nintendo", #3DS, DS
platform == "PC" ~ "PC",
platform == "Dreamcast" ~ "Sega",
platform == "PSP" ~ "Sony",
platform == "Stadia" ~ "PC",
platform == "Switch" ~ "Nintendo",
))
#games %>%
#  mutate(company =
case_when(
starts_with(platform, "PlayStation") ~ "Sony",
starts_with(platform, "Xbox") ~ "Microsoft",
starts_with(platform, "Wii") ~ "Nintendo",
starts_with(platform, "Nintendo") ~ "Nintendo",
starts_with(platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
ends_with(platform, "DS") ~ "Nintendo", #3DS, DS
platform == "PC" ~ "PC",
platform == "Dreamcast" ~ "Sega",
platform == "PSP" ~ "Sony",
platform == "Stadia" ~ "PC",
platform == "Switch" ~ "Nintendo",
)
#games %>%
platform = games$platform
#  mutate(company =
case_when(
starts_with(platform, "PlayStation") ~ "Sony",
starts_with(platform, "Xbox") ~ "Microsoft",
starts_with(platform, "Wii") ~ "Nintendo",
starts_with(platform, "Nintendo") ~ "Nintendo",
starts_with(platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
ends_with(platform, "DS") ~ "Nintendo", #3DS, DS
platform == "PC" ~ "PC",
platform == "Dreamcast" ~ "Sega",
platform == "PSP" ~ "Sony",
platform == "Stadia" ~ "PC",
platform == "Switch" ~ "Nintendo",
)
#  mutate(company =
case_when(
startsWith(platform, "PlayStation") ~ "Sony",
startsWith(platform, "Xbox") ~ "Microsoft",
startsWith(platform, "Wii") ~ "Nintendo",
startsWith(platform, "Nintendo") ~ "Nintendo",
startsWith(platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
endsWith(platform, "DS") ~ "Nintendo", #3DS, DS
platform == "PC" ~ "PC",
platform == "Dreamcast" ~ "Sega",
platform == "PSP" ~ "Sony",
platform == "Stadia" ~ "PC",
platform == "Switch" ~ "Nintendo",
)
games %>%
mutate(company = case_when(
startsWith(platform, "PlayStation") ~ "Sony",
startsWith(platform, "Xbox") ~ "Microsoft",
startsWith(platform, "Wii") ~ "Nintendo",
startsWith(platform, "Nintendo") ~ "Nintendo",
startsWith(platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
endsWith(platform, "DS") ~ "Nintendo", #3DS, DS
platform == "PC" ~ "PC",
platform == "Dreamcast" ~ "Sega",
platform == "PSP" ~ "Sony",
platform == "Stadia" ~ "PC",
platform == "Switch" ~ "Nintendo",
))
games$company
games %>% mutate(company = case_when(
startsWith(platform, "PlayStation") ~ "Sony",
startsWith(platform, "Xbox") ~ "Microsoft",
startsWith(platform, "Wii") ~ "Nintendo",
startsWith(platform, "Nintendo") ~ "Nintendo",
startsWith(platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
endsWith(platform, "DS") ~ "Nintendo", #3DS, DS
platform == "PC" ~ "PC",
platform == "Dreamcast" ~ "Sega",
platform == "PSP" ~ "Sony",
platform == "Stadia" ~ "PC",
platform == "Switch" ~ "Nintendo",
))
games$company
games$company = case_when(
startsWith(platform, "PlayStation") ~ "Sony",
startsWith(platform, "Xbox") ~ "Microsoft",
startsWith(platform, "Wii") ~ "Nintendo",
startsWith(platform, "Nintendo") ~ "Nintendo",
startsWith(platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
endsWith(platform, "DS") ~ "Nintendo", #3DS, DS
platform == "PC" ~ "PC",
platform == "Dreamcast" ~ "Sega",
platform == "PSP" ~ "Sony",
platform == "Stadia" ~ "PC",
platform == "Switch" ~ "Nintendo",
)
games$company
unique(games$company)
# Adding company based on platform:
games$platform = as.factor(games$platform)
games$company = case_when(
startsWith(platform, "PlayStation") ~ "Sony",
startsWith(platform, "Xbox") ~ "Microsoft",
startsWith(platform, "Wii") ~ "Nintendo",
startsWith(platform, "Nintendo") ~ "Nintendo",
startsWith(platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
endsWith(platform, "DS") ~ "Nintendo", #3DS, DS
platform == "PC" ~ "PC",
platform == "Dreamcast" ~ "Sega",
platform == "PSP" ~ "Sony",
platform == "Stadia" ~ "PC",
platform == "Switch" ~ "Nintendo",
)
unique(games$company)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyr) ## For data wrangling and visualization
library(dplyr)
library(lubridate) ## To work with dates
library(splitstackshape)
library(udpipe) ## For textual analysis
# Function to trim white spaces in character data
clean_whitespace = function(df){
for(col in colnames(df)){
if(is.character(df[[col]])){
df[[col]] = trimws(df[[col]], which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
}
}
return(df)
}
# Trim whitespaces
games = clean_whitespace(games)
setwd('/Users/linhtang/Desktop/STA-395/Code')
games = read_csv("games.csv")
games2 = read_csv("meta_games2.csv") #data with meta score only
#summary(games)
# Function to trim white spaces in character data
clean_whitespace = function(df){
for(col in colnames(df)){
if(is.character(df[[col]])){
df[[col]] = trimws(df[[col]], which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
}
}
return(df)
}
# Trim whitespaces
games = clean_whitespace(games)
games2 = clean_whitespace(games2)
# Remove duplicates based on title and platform in both dataset
games = distinct(games, title, platform, .keep_all = T) # 305 duplicates removed
games2 = distinct(games2, title, platform, .keep_all = T)
# Collapse three cols of meta scores into one
games2$meta = apply(games2[4:6], 1, function(x) x[!is.na(x)])
games2 = games2[-c(3:6)] # drop unnecessary cols
# Merge 2 data sets on title and platform by a left join
games = games %>%
select(-meta) %>%
left_join(games2, by = c("title", "platform"))
# Rename columns for consistent naming convention
games = games %>% rename_with(tolower)
games = rename(games, meta_score = meta, user_score = user, esrb_ratings = ratings)
# Adding company based on platform:
games$platform = as.factor(games$platform)
games$company = case_when(
startsWith(platform, "PlayStation") ~ "Sony",
startsWith(platform, "Xbox") ~ "Microsoft",
startsWith(platform, "Wii") ~ "Nintendo",
startsWith(platform, "Nintendo") ~ "Nintendo",
startsWith(platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
endsWith(platform, "DS") ~ "Nintendo", #3DS, DS
platform == "PC" ~ "PC",
platform == "Dreamcast" ~ "Sega",
platform == "PSP" ~ "Sony",
platform == "Stadia" ~ "PC",
platform == "Switch" ~ "Nintendo",
)
# Rename columns for consistent naming convention
games = games %>% rename_with(tolower)
games = rename(games, meta_score = meta, user_score = user, esrb_ratings = ratings)
# Adding company based on platform:
games$company = case_when(
startsWith(games$platform, "PlayStation") ~ "Sony",
startsWith(games$platform, "Xbox") ~ "Microsoft",
startsWith(games$platform, "Wii") ~ "Nintendo",
startsWith(games$platform, "Nintendo") ~ "Nintendo",
startsWith(games$platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
endsWith(games$platform, "DS") ~ "Nintendo", #3DS, DS
games$platform == "PC" ~ "PC",
games$platform == "Dreamcast" ~ "Sega",
games$platform == "PSP" ~ "Sony",
games$platform == "Stadia" ~ "PC",
games$platform == "Switch" ~ "Nintendo",
)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyr) ## For data wrangling and visualization
library(dplyr)
library(lubridate) ## To work with dates
library(splitstackshape)
library(udpipe) ## For textual analysis
setwd('/Users/linhtang/Desktop/STA-395/Code')
games = read_csv("games.csv")
games2 = read_csv("meta_games2.csv") #data with meta score only
#summary(games)
# Function to trim white spaces in character data
clean_whitespace = function(df){
for(col in colnames(df)){
if(is.character(df[[col]])){
df[[col]] = trimws(df[[col]], which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
}
}
return(df)
}
# Trim whitespaces
games = clean_whitespace(games)
games2 = clean_whitespace(games2)
# Remove duplicates based on title and platform in both dataset
games = distinct(games, title, platform, .keep_all = T) # 305 duplicates removed
games2 = distinct(games2, title, platform, .keep_all = T)
# Collapse three cols of meta scores into one
games2$meta = apply(games2[4:6], 1, function(x) x[!is.na(x)])
games2 = games2[-c(3:6)] # drop unnecessary cols
# Merge 2 data sets on title and platform by a left join
games = games %>%
select(-meta) %>%
left_join(games2, by = c("title", "platform"))
# Rename columns for consistent naming convention
games = games %>% rename_with(tolower)
games = rename(games, meta_score = meta, user_score = user, esrb_ratings = ratings)
# Adding company based on platform:
games$company = case_when(
startsWith(games$platform, "PlayStation") ~ "Sony",
startsWith(games$platform, "Xbox") ~ "Microsoft",
startsWith(games$platform, "Wii") ~ "Nintendo",
startsWith(games$platform, "Nintendo") ~ "Nintendo",
startsWith(games$platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
endsWith(games$platform, "DS") ~ "Nintendo", #3DS, DS
games$platform == "PC" ~ "PC",
games$platform == "Dreamcast" ~ "Sega",
games$platform == "PSP" ~ "Sony",
games$platform == "Stadia" ~ "PC",
games$platform == "Switch" ~ "Nintendo",
)
# Change platform, developers, publishers, ratings variables to categorical data
games$platform = as.factor(games$platform)
games$developers = as.factor(games$developers)
games$publishers = as.factor(games$publishers)
games$esrb_ratings = as.factor(games$esrb_ratings)
# If game ranking is NA, set it to 1 level lower than the the lowest rating
games$most_discussed = replace_na(games$most_discussed, max(games$most_discussed, na.rm = TRUE))
games$best_game = replace_na(games$best_game, max(games$best_game, na.rm = TRUE))
games$most_shared = replace_na(games$most_shared, max(games$most_shared, na.rm = TRUE))
# Change release_date to datetime data type
games$release_date = parse_date_time(games$release_date, "mdy")
# Convert user score to numeric, scale to match meta score scale (out of 100)
games$user_score = as.numeric(games$user_score) * 10
# Drop rows that user_score and meta_score are NAs
games = games %>% drop_na(user_score, meta_score)
# Calculate years since release
today = as.Date(Sys.Date())
games$years_since_released = time_length(difftime(today, games$release_date), "years")
# Create dummy variables to indicate whether game allows multiplayer and online gaming
games$allow_multiplayer = ifelse(games$num_players == "missing", "missing", ifelse(games$num_players == "1 Player", FALSE, TRUE))
games$allow_online = ifelse(games$num_players_online == "missing", "missing", ifelse(grepl("No Online Multiplayer", games$num_players_online), FALSE, TRUE))
# Change to categorical vars to include "missing" data
games$allow_multiplayer = as.factor(games$allow_multiplayer)
games$allow_online = as.factor(games$allow_online)
# Create dummy variables for different genres
games = cSplit_e(games, "genres", sep=",", type = "character", fill = 0, drop = F)
# Categorize esrb_desc into 8 main ESRB content descriptors by ESRB website
esrb_content_descriptors = c("Substances", "Blood", "Violence", "Humor", "Language", "Nudity", "Gambling", "Sexuality", "missing") # by https://www.esrb.org/ratings-guide/#cont_desc
for(i in 1:nrow(games)){
if(!is.na(games$esrb_descs[i])){
games$esrb_descs[i] = paste(intersect(strsplit(games$esrb_descs[i], " ")[[1]], esrb_content_descriptors), collapse=",")
}
}
# Create dummy variables for different descriptors (esrb_desc_missing indicates "missing" desc)
games = cSplit_e(games, "esrb_descs", sep=",", type = "character", fill = 0, drop = F)
View(games)
# meta_data without dropping any original columns
write_csv(games, "clean_data/clean_data_all.csv") # dim: 18295 x 197
# Count NAs in the first 16 vars (i.e. non-dummy)
#data.frame(colSums(is.na(games[1:17])))
# Remove redundant columns and NAs from dataset
games = subset(games, select = -c(link, num_players, num_players_online, genres, esrb_descs))
games = games[complete.cases(games),]
# Export tidy data for modeling
write_csv(games, "clean_data/clean_data_model.csv") # dim: 16262 x 192
#
save(games, file="games_data.Rdata")
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/linhtang/Desktop/STA-395/Code')
load("games_data.Rdata")
View(games)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyr) ## For data wrangling and visualization
library(dplyr)
library(lubridate) ## To work with dates
library(splitstackshape)
library(udpipe) ## For textual analysis
setwd('/Users/linhtang/Desktop/STA-395/Code')
games = read_csv("games.csv")
games2 = read_csv("meta_games2.csv") #data with meta score only
#summary(games)
# Function to trim white spaces in character data
clean_whitespace = function(df){
for(col in colnames(df)){
if(is.character(df[[col]])){
df[[col]] = trimws(df[[col]], which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
}
}
return(df)
}
# Trim whitespaces
games = clean_whitespace(games)
games2 = clean_whitespace(games2)
# Remove duplicates based on title and platform in both dataset
games = distinct(games, title, platform, .keep_all = T) # 305 duplicates removed
games2 = distinct(games2, title, platform, .keep_all = T)
# Collapse three cols of meta scores into one
games2$meta = apply(games2[4:6], 1, function(x) x[!is.na(x)])
games2 = games2[-c(3:6)] # drop unnecessary cols
# Merge 2 data sets on title and platform by a left join
games = games %>%
select(-meta) %>%
left_join(games2, by = c("title", "platform"))
# Rename columns for consistent naming convention
games = games %>% rename_with(tolower)
games = rename(games, meta_score = meta, user_score = user, esrb_ratings = ratings)
# Adding company based on platform:
games$company = case_when(
startsWith(games$platform, "PlayStation") ~ "Sony",
startsWith(games$platform, "Xbox") ~ "Microsoft",
startsWith(games$platform, "Wii") ~ "Nintendo",
startsWith(games$platform, "Nintendo") ~ "Nintendo",
startsWith(games$platform, "Game") ~ "Nintendo", #GameCub, Game Boy Advance
endsWith(games$platform, "DS") ~ "Nintendo", #3DS, DS
games$platform == "PC" ~ "PC",
games$platform == "Dreamcast" ~ "Sega",
games$platform == "PSP" ~ "Sony",
games$platform == "Stadia" ~ "PC",
games$platform == "Switch" ~ "Nintendo",
)
# Change platform, developers, publishers, ratings variables to categorical data
games$company = as.factor(games$company)
games$platform = as.factor(games$platform)
games$developers = as.factor(games$developers)
games$publishers = as.factor(games$publishers)
games$esrb_ratings = as.factor(games$esrb_ratings)
# If game ranking is NA, set it to 1 level lower than the the lowest rating
games$most_discussed = replace_na(games$most_discussed, max(games$most_discussed, na.rm = TRUE))
games$best_game = replace_na(games$best_game, max(games$best_game, na.rm = TRUE))
games$most_shared = replace_na(games$most_shared, max(games$most_shared, na.rm = TRUE))
# Change release_date to datetime data type
games$release_date = parse_date_time(games$release_date, "mdy")
# Convert user score to numeric, scale to match meta score scale (out of 100)
games$user_score = as.numeric(games$user_score) * 10
# Drop rows that user_score and meta_score are NAs
games = games %>% drop_na(user_score, meta_score)
# Calculate years since release
today = as.Date(Sys.Date())
games$years_since_released = time_length(difftime(today, games$release_date), "years")
# Create dummy variables to indicate whether game allows multiplayer and online gaming
games$allow_multiplayer = ifelse(games$num_players == "missing", "missing", ifelse(games$num_players == "1 Player", FALSE, TRUE))
games$allow_online = ifelse(games$num_players_online == "missing", "missing", ifelse(grepl("No Online Multiplayer", games$num_players_online), FALSE, TRUE))
# Change to categorical vars to include "missing" data
games$allow_multiplayer = as.factor(games$allow_multiplayer)
games$allow_online = as.factor(games$allow_online)
# Create dummy variables for different genres
games = cSplit_e(games, "genres", sep=",", type = "character", fill = 0, drop = F)
# Categorize esrb_desc into 8 main ESRB content descriptors by ESRB website
esrb_content_descriptors = c("Substances", "Blood", "Violence", "Humor", "Language", "Nudity", "Gambling", "Sexuality", "missing") # by https://www.esrb.org/ratings-guide/#cont_desc
for(i in 1:nrow(games)){
if(!is.na(games$esrb_descs[i])){
games$esrb_descs[i] = paste(intersect(strsplit(games$esrb_descs[i], " ")[[1]], esrb_content_descriptors), collapse=",")
}
}
# Create dummy variables for different descriptors (esrb_desc_missing indicates "missing" desc)
games = cSplit_e(games, "esrb_descs", sep=",", type = "character", fill = 0, drop = F)
# meta_data without dropping any original columns
write_csv(games, "clean_data/clean_data_all.csv") # dim: 18295 x 197
# Count NAs in the first 16 vars (i.e. non-dummy)
#data.frame(colSums(is.na(games[1:17])))
# Remove redundant columns and NAs from dataset
games = subset(games, select = -c(link, num_players, num_players_online, genres, esrb_descs))
games = games[complete.cases(games),]
# Export tidy data for modeling
write_csv(games, "clean_data/clean_data_model.csv") # dim: 16262 x 192
# Save data as RData format for faster import
save(games, file="games_data.Rdata")
# load model to analyze english text
# games$game_id = 1:nrow(games)
# model <- udpipe_download_model(language = "english")
# udmodel_english <- udpipe_load_model(file = model$file_model)
# s <- udpipe_annotate(udmodel_english, x = games$game_desc, doc_id = games$game_id)
# x <- data.frame(s)
# stats <- keywords_rake(x = x, term = "lemma", group = "doc_id",
#                        relevant = x$upos %in% c("NOUN", "ADJ"))
# stats$key <- factor(stats$keyword, levels = rev(stats$keyword))
# barchart(key ~ rake, data = head(subset(stats, freq > 3), 20), col = "red",
#          main = "Keywords identified by RAKE",
#          xlab = "Rake")
